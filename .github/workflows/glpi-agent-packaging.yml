name: GLPI Agent Packaging

on: push

jobs:
  create-release:

    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags/1.')

    outputs:
      tag: ${{ steps.extract-tag.outputs.tag }}
      upload_url: ${{ steps.create-tagged-release.outputs.upload_url }}

    steps:
    - uses: actions/checkout@v2
    - name: Extract tag
      id: extract-tag
      run: |
        TAG="${GITHUB_REF#*refs/tags/}"
        echo "::set-output name=tag::$TAG"
        echo "::set-output name=version::${TAG%%-*}"
        case "${TAG#*-}" in
            $TAG)
                echo "::set-output name=revname::"
                ;;
            test*)
                echo "::set-output name=revname:: Test release ${TAG#*-test}"
                ;;
            beta*)
                echo "::set-output name=revname:: Beta release ${TAG#*-beta}"
                ;;
            *)
                echo "::set-output name=revname:: rev ${TAG#*-}"
                ;;
        esac
      shell: bash
    - name: Generate release description
      id: github-release-body
      run: |
        tools/github-release-description.sh
      shell: bash
    - name: Create Tagged Release
      id: create-tagged-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: GLPI Agent ${{ steps.extract-tag.outputs.version }}${{ steps.extract-tag.outputs.revname }}
        body_path: release-description.md
        draft: ${{ steps.extract-tag.outputs.revname == '' }}      # Don't publish releases immediatly so we can edit the description
        prerelease: ${{ steps.extract-tag.outputs.revname != '' }} # Mark as prerelease if we publish immediatly when a revision is set on tag

  windows-packaging:

    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ x64, x86 ]

    if: always()
    needs: create-release

    steps:
    - uses: actions/checkout@v2
    - name: Create folder for cached datas
      run: |
        mkdir C:\Strawberry-perl-for-GLPI-Agent_build\restore
      shell: cmd
    - name: Restore points cache
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: C:/Strawberry-perl-for-GLPI-Agent_build/restore
        key: windows-packaging-restore-points-${{ matrix.arch }}-${{ hashFiles('contrib\windows\packaging\PerlBuildJob.pm') }}
    - name: List files in cached path
      if: success() || failure()
      run: |
        dir C:\Strawberry-perl-for-GLPI-Agent_build\restore
      shell: cmd
    - name: Update environment
      run: |
        echo 'C:\Strawberry\perl\bin'      >> $GITHUB_PATH
        echo 'C:\Strawberry\perl\site\bin' >> $GITHUB_PATH
        echo 'C:\Strawberry\c\bin'         >> $GITHUB_PATH
      shell: bash
    - name: Show environment
      run: |
        echo "PATH=%PATH%"
        perl --version
        perl -V
      shell: cmd
    - name: Install Module::Install
      run: cpan -T Module::Install
      shell: cmd
    - name: Prepare Makefile
      run: perl Makefile.PL
      shell: cmd
    - name: Install Perl::Dist::Strawberry
      run: |
        cpanm --notest --verbose Perl::Dist::Strawberry
      shell: cmd
    - name: Build package
      run: |
        perl contrib\windows\glpi-agent-packaging.pl --arch ${{ matrix.arch }}
      shell: cmd
    - name: List generated files
      if: success() || failure()
      run: |
        dir C:\Strawberry-perl-for-GLPI-Agent_build\output
      shell: cmd
    - name: Upload windows built artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: Windows-Build
        path: C:\Strawberry-perl-for-GLPI-Agent_build\output
    - name: Upload debug MSI-Build artifacts
      if: failure() #success() || failure() # Only enable on failure or when debugging is required
      uses: actions/upload-artifact@v2
      with:
        name: MSI-Build-Debug
        path: C:\Strawberry-perl-for-GLPI-Agent_build\build\msi
    - name: Upload Portable Archive Asset
      id: upload-portable-archive-asset
      if: startsWith(github.ref, 'refs/tags/1.')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: C:\Strawberry-perl-for-GLPI-Agent_build\output\glpi-agent-${{ needs.create-release.outputs.tag }}-${{ matrix.arch }}.zip
        asset_name: glpi-agent-${{ needs.create-release.outputs.tag }}-${{ matrix.arch }}.zip
        asset_content_type: application/zip
    - name: Upload MSI Installer Asset
      id: upload-msi-asset
      if: startsWith(github.ref, 'refs/tags/1.')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: C:\Strawberry-perl-for-GLPI-Agent_build\output\GLPI-Agent-${{ needs.create-release.outputs.tag }}-${{ matrix.arch }}.msi
        asset_name: GLPI-Agent-${{ needs.create-release.outputs.tag }}-${{ matrix.arch }}.msi
        asset_content_type: application/x-msi

  macosx-packaging:

    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ x86_64, arm64 ]

    if: always()
    needs: create-release

    steps:
    - uses: actions/checkout@v2
    - name: Restore points cache
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: |
          - contrib/macosx/*.gz
          - contrib/macosx/*.sha1
          - contrib/macosx/*.sha1.txt
          - contrib/macosx/munkipkg
          - contrib/macosx/build/perl*
          - contrib/macosx/build/openssl*
          - contrib/macosx/build/zlib*
          - contrib/macosx/build/Applications
        key: macosx-packaging-restore-points-${{ hashFiles('contrib/macosx/glpi-agent-packaging.sh') }}
    - name: Build package
      run: |
        ./contrib/macosx/glpi-agent-packaging.sh --arch ${{ matrix.arch }}
      shell: bash
    - name: List generated files
      if: success() || failure()
      run: |
        ls contrib/macosx/build
      shell: bash
    - name: Upload MacOSX built artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: MacOSX-Build
        path: |
          contrib/macosx/build/*.pkg
          contrib/macosx/build/*.dmg
    - name: Upload MacOSX PKG installer
      id: upload-macosx-pkg-asset
      if: startsWith(github.ref, 'refs/tags/1.')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: contrib/macosx/build/GLPI-Agent-${{ needs.create-release.outputs.tag }}.pkg
        asset_name: GLPI-Agent-${{ needs.create-release.outputs.tag }}.pkg
        asset_content_type: application/octet-stream
    - name: Upload MacOSX DMG installer image
      id: upload-macosx-dmg-asset
      if: startsWith(github.ref, 'refs/tags/1.')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: contrib/macosx/build/GLPI-Agent-${{ needs.create-release.outputs.tag }}.dmg
        asset_name: GLPI-Agent-${{ needs.create-release.outputs.tag }}.dmg
        asset_content_type: application/octet-stream

  linux-snap-packaging:

    runs-on: ubuntu-latest

    if: always()
    needs: create-release

    steps:
    - uses: actions/checkout@v2
    - uses: snapcore/action-build@v1
      id: snapcraft
      env:
        TERM: ${{ env.TERM }}:${{ github.ref }}
    - name: Upload Snap built artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Snap-Build
        path: ${{ steps.snapcraft.outputs.snap }}
    - name: Upload Snap Package
      id: upload-linux-snap-asset
      if: startsWith(github.ref, 'refs/tags/1.')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.snapcraft.outputs.snap }}
        asset_name: ${{ steps.snapcraft.outputs.snap }}
        asset_content_type: application/octet-stream

  linux-debian-packaging:

    runs-on: ubuntu-latest

    if: always()
    needs: create-release

    steps:
    - uses: actions/checkout@v2
    - name: Install build dependencies packages
      run: |
        sudo apt -y install dpkg-dev debhelper libmodule-install-perl      \
          libclone-perl libdigest-sha-perl libfile-copy-recursive-perl     \
          libfile-which-perl libhttp-cookies-perl libhttp-daemon-perl      \
          libhttp-proxy-perl libhttp-server-simple-perl                    \
          libhttp-server-simple-authen-perl libio-capture-perl             \
          libipc-run-perl libjson-pp-perl libnet-ip-perl                   \
          libnet-snmp-perl libio-socket-ssl-perl libparse-edid-perl        \
          libproc-daemon-perl libparallel-forkmanager-perl                 \
          libtest-compile-perl libtest-deep-perl libtest-nowarnings-perl   \
          libtest-exception-perl libtest-mockmodule-perl                   \
          libtest-mockobject-perl libtext-template-perl                    \
          libsocket-getaddrinfo-perl libuniversal-require-perl liburi-perl \
          libwww-perl libxml-treepp-perl libxml-xpath-perl libyaml-perl    \
          devscripts
      shell: bash
    - name: Build debian packages
      id: debbuild
      run: |
        echo "::set-output name=debpath:: $(dirname $PWD)"
        # make -gitXXXXXXXX release when not tagged
        if [ -z "${{ needs.create-release.outputs.tag }}" -a -n "$GITHUB_SHA" ]; then
            VERSION=$(perl -Ilib -MFusionInventory::Agent::Version -e 'print $FusionInventory::Agent::Version::VERSION')
            tools/make-release.sh --no-git ${VERSION%-dev}-git${GITHUB_SHA:0:8}
        fi
        # DH_COMPAT is needed on current ubuntu-latest, it could be removed after switching to Ubuntu 20.04
        export DH_COMPAT=11
        dpkg-buildpackage -d -b --no-sign
      shell: bash
    - name: Run lintian
      run: |
        sudo apt -y install lintian
        lintian --profile debian --show-overrides -L ">=pedantic"
      shell: bash
    - name: Upload built deb artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Debian-Build
        path: |
          ${{ steps.debbuild.outputs.debpath }}/*.deb
          ${{ steps.debbuild.outputs.debpath }}/*.buildinfo
          ${{ steps.debbuild.outputs.debpath }}/*.changes
    - name: Upload Deb Packages
      id: upload-linux-deb-asset
      if: startsWith(github.ref, 'refs/tags/1.')
      run: |
        A_OPTS=""
        for deb in ../*.deb
        do
          A_OPTS="$A_OPTS -a $deb"
        done
        hub release edit -m "" $A_OPTS ${{ needs.create-release.outputs.tag }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux-rpm-packaging:

    runs-on: ubuntu-latest

    if: always()
    needs: create-release

    steps:
    - uses: actions/checkout@v2
    - name: Install build dependencies packages
      run: |
        sudo apt -y install rpm devscripts \
            libfile-which-perl libuniversal-require-perl libmodule-install-perl
      shell: bash
    - name: Build rpm packages
      id: rpmbuild
      run: |
        contrib/unix/glpi-agent-rpm-build.sh --nodeps
      shell: bash
    - name: Test rpm local install & uninstall
      run: |
        rpm -ivh --nodeps ${{ steps.rpmbuild.outputs.glpi-agent }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-network }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-collect }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-deploy }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-wakeonlan }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-esx }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-cron }}
        rpm -e glpi-agent glpi-agent-task-network glpi-agent-task-collect \
            glpi-agent-task-deploy glpi-agent-task-wakeonlan \
            glpi-agent-task-esx glpi-agent-cron
      shell: bash
    - name: Upload built rpm artifacts
      uses: actions/upload-artifact@v2
      with:
        name: RPM-Build
        path: |
          ${{ steps.rpmbuild.outputs.rpmdir }}/*/*.rpm
          ${{ steps.rpmbuild.outputs.srpmdir }}/*.rpm
          ${{ steps.rpmbuild.outputs.srcdir }}/glpi-agent-*.tar.gz
    - name: Upload RPM Packages
      id: upload-linux-deb-asset
      if: startsWith(github.ref, 'refs/tags/1.')
      run: |
        A_OPTS=""
        RPMDIR=`rpm --eval "%{_rpmdir}"`
        for rpm in $RPMDIR/*/*.rpm
        do
          A_OPTS="$A_OPTS -a $rpm"
        done
        hub release edit -m "" $A_OPTS ${{ needs.create-release.outputs.tag }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

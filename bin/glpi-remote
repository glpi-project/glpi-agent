#!/usr/bin/perl

use strict;
use warnings;

use lib './lib';
use setup;

use UNIVERSAL::require;
use English qw(-no_match_vars);

use LWP::UserAgent;
use Pod::Usage;
use Getopt::Long;
use File::Find;

use FusionInventory::Agent::Config;
use FusionInventory::Agent::Logger;
use FusionInventory::Agent::Storage;
use FusionInventory::Agent::Task::RemoteInventory::Remote;

our $VERSION = "1.0";

Getopt::Long::Configure( "no_ignorecase" );
Getopt::Long::Configure( "pass_through" );

my $logger;

my $options = {
    useragent   => "GLPI-Remote/$VERSION",
    timeout     => 10,
};

GetOptions(
    $options,
    'help|h',
    'verbose|v',
    'debug+',
    'inventory|i',
    'target=s',
    'port|p=s',
    'timeout|t=i',
    'threads|T=i',
    'user|u=s',
    'password|P=s',
    'show-passwords|X',
    'credentials|c=s',
    'add|A',
    'ssh',
    'ssl',
    'ca-cert-file=s',
    'ca-cert-dir=s',
    'ssl-cert-file=s',
    'no-ssl-check|S',
    'no-check|C',
    'no-header|H',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitstatus => 0) if $options->{help};

my ($cmd, @params) = @ARGV;
if ($cmd) {
    if ($options->{debug}) {
        warn "Current vardir: $setup{vardir}\n";
    }

    die "Var directory is missing\n" unless -d $setup{vardir};

    my %cmds = (
        list    => \&list,
        help    => \&help,
        add     => \&add,
        del     => \&delete,
        delete  => \&delete,
        scan    => \&todo,
    );

    die "Unsupported '$cmd' command\n" unless exists($cmds{$cmd});

    $logger = FusionInventory::Agent::Logger->new(config => $options);

    &{$cmds{$cmd}}(@params);

    exit(0);
}

exit(0);

my %deviceid;
my %targets;
my %storages;

sub help {
    my @params = @_;
    pod2usage(-verbose => 0, -exitstatus => 0);
}

sub todo {
    die "TODO: command '$cmd' still not supported\n";
}

sub list {
    my ($sub) = @_;

    my ($lenid, $lenurl) = (0, 0);
    if ($sub) {
        die "Unsupported '$sub' list subcommand\n" unless $sub eq "targets";
        my @targets = get_targets();
        my ($lentype, $lentime) = (0, 0);
        map { my $l = length($_); $lentype = $l if $l > $lentype } "type", map { $_->{type} } @targets;
        map { my $l = length($_); $lenid   = $l if $l > $lenid   } "id", map { $_->{id} } @targets;
        map { my $l = length($_); $lenurl  = $l if $l > $lenurl  } "url/path", map { $_->{url} // $_->{path} // '' } @targets;
        map { my $l = length($_); $lentime = $l if $l > $lentime } "maxdelay", map { $_->{maxDelay} // 0 } @targets;

        my $string = "%-".$lenid."s  %-".$lentype."s  %-".$lenurl."s  %-".$lentime."s  %s\n";
        print sprintf( $string, "id", "type", "url/path", "maxdelay", "Next run date")
            unless $options->{'no-header'};

        foreach my $target (@targets) {
            print sprintf( $string,
                $target->{id}, $target->{type}, $target->{url} || $target->{path} // '',
                $target->{maxDelay}, scalar(localtime($target->{nextRunDate}//0))
            );
        }
    } else {
        my @remotes = get_remotes();
        my $lentg = 0;
        map { my $l = length($_); $lenid  = $l if $l > $lenid  } "deviceid", map { $_->deviceid } map { $_->{remote} } @remotes;
        map { my $l = length($_); $lenurl = $l if $l > $lenurl } "url", map { $_->url } map { $_->{remote} } @remotes;
        map { my $l = length($_); $lentg  = $l if $l > $lentg  } "target", map { $_->{id} } map { $_->{target} } @remotes;
        my $lenindex = length(scalar(@remotes));
        $lenindex = length("index") if length("index") > $lenindex;

        my $string = "%".$lenindex."s  %-".$lenid."s  %-".$lenurl."s  %-".$lentg."s  %s\n";
        print sprintf( $string, "index", "deviceid", "url", "target", "Next run date")
            unless $options->{'no-header'};

        my $index = 1;
        foreach my $current (@remotes) {
            my $remote = $current->{remote};
            print sprintf( $string,
                $index++, $remote->deviceid, $remote->safe_url,
                $current->{target}->{id},
                $remote->expiration ? scalar(localtime($remote->expiration)) : "on next agent run"
            );
        }
    }
}

sub add {
    my @urls = @_;

    # Look at targets and collect target storages
    my @targets = get_targets();

    # Try to preselect server if no target option is specified
    unless ($options->{target} || $options->{server} || $options->{local}) {
        my @servers = grep { $_->{type} eq 'server' } @targets;
        warn "Can't select a default server target\n" unless @servers == 1;
        $options->{target} = $servers[0]->{id} if @servers == 1;
    }

    my @storages;
    if ($options->{target}) {
        my $target = $options->{target};
        die "No such '$target' target available to handle remotes\n" unless $targets{$target};
        my $storage = $targets{$target}->{storage};
        if ($storage) {
            push @storages, $storage;
            $storages{$storage} = $target;
        }
    }
    if ($options->{server} || $options->{local}) {
        my $config = FusionInventory::Agent::Config->new(
            options => $options,
            vardir  => $setup{vardir},
        );
        my $targets = $config->getTargets();
        foreach my $target (@{$targets}) {
            next unless $target->isType('local') || $target->isType('server');
            my $storage = $target->getStorage();
            next unless $storage;
            push @storages, $storage;
            $storages{$storage} = $target->{id};
        }
    }
    unless (@storages) {
        my $targets = join(", ", sort keys(%targets));
        die "No target specified to store remotes, choose one in $targets\n" ;
    }

    my $umask = umask 0007;
    foreach my $url (@urls) {
        my $remote = FusionInventory::Agent::Task::RemoteInventory::Remote->new(
            url     => $url,
            config  => $options,
            logger  => $logger,
        );
        my $safe_url = $remote->safe_url();
        unless ($remote) {
            warn "Can't create virtual remote agent with '$safe_url'\n";
            next;
        }

        my $checkerror;
        $checkerror = $remote->checking_error() unless $options->{'no-check'};
        if ($checkerror) {
            warn "'$safe_url' check failure: $checkerror\n";
            next;
        }

        my $id = $remote->deviceid();
        foreach my $storage (@storages) {
            my $remotes = $storage->restore( name => 'remotes' ) // {};
            my $match;
            if ($remotes->{$id}) {
                my $targetid = $storages{$storage} // '';
                warn "Updating $id remote".($targetid ? " for $targetid" : "")."\n";
                $match = $id;
            } elsif ($remote->protocol() eq 'winrm') {
                foreach my $otherid (sort keys(%{$remotes})) {
                    my $other = FusionInventory::Agent::Task::RemoteInventory::Remote->new(
                        url     => $remotes->{$otherid}->{url},
                    );
                    next unless $other->protocol() eq 'winrm';
                    next unless $other->winrm_url() eq $remote->winrm_url();
                    $match = $otherid;
                    warn "Updating $match remote for $storages{$storage}\n";
                    last;
                }
            }
            $remote->deviceid(deviceid => $match) if $match;
            $remotes->{$match||$id} = $remote->dump();
            $storage->save( name => 'remotes', data => $remotes );
            if ($match) {
                print "Updated $match remote agent for $storages{$storage}\n";
            } else {
                print "Added $id remote agent to $storages{$storage}\n";
            }
        }
    }
    umask $umask;
}

sub delete {
    die "No index or deviceid provided to delete command\n" unless @_;
    my @remotes = get_remotes();
    foreach my $rm (@_) {
        my $current;
        if ($rm =~ /^\d+$/ && $rm <= @remotes) {
            $current = [ $remotes[$rm-1] ];
        } elsif ($deviceid{$rm}) {
            $current = $deviceid{$rm};
        } else {
            warn "No such remote: $rm\n";
            next;
        }
        foreach my $list (@{$current}) {
            my $storage = $list->{storage};
            my $remotes = $storage->restore( name => 'remotes' ) // {};
            my $id = $list->{remote}->deviceid();
            my $deleted = delete $remotes->{$id}
                or warn "No such deviceid found: $id\n";
            $storage->save( name => 'remotes', data => $remotes );
            print "$id remote agent deleted from $list->{target}->{id}\n" if $deleted;
        }
    }
}

sub get_remotes {
    my @remotes;

    my @targets = get_targets();

    foreach my $target (@targets) {
        my $id = $target->{id};
        my $current = $targets{$id}
            or next;

        my $storage = $current->{storage};

        # Load remotes from storage
        my $remotes = $storage->restore( name => 'remotes' ) // {};
        foreach my $id (sort keys(%{$remotes})) {
            my $dump = $remotes->{$id};
            next unless ref($dump) eq 'HASH';
            my $remote = FusionInventory::Agent::Task::RemoteInventory::Remote->new(
                dump    => $dump,
                config  => $options,
                logger  => $logger,
            );
            my $current = {
                remote  => $remote,
                storage => $storage,
                target  => $target,
            };
            push @remotes, $current;

            # Also index by deviceid when deleting
            if ($cmd =~ /^del(?:ete)?$/) {
                push @{$deviceid{$id}}, $current;
            }
        }
    }

    return @remotes;
}

sub get_targets {
    my @targets;

    File::Find::find(
        {
            wanted => sub {
                return unless $File::Find::name =~ m/\/target\.dump$/;
                return if -d $File::Find::name;

                my $storage = FusionInventory::Agent::Storage->new(
                    directory   => $File::Find::dir,
                    logger      => $logger,
                );

                # Check target from storage
                my $target = $storage->restore( name => 'target' ) // {};

                return unless $target->{type} && $target->{id};
                push @targets, $target;

                # Also keep storage refs when adding a remote to a local or server target
                if ($target->{type} =~ /^local|server$/ ) {
                    my $current = {
                        target  => $target,
                        storage => $storage,
                    };
                    my $id = $target->{id};
                    $targets{$id} = $current unless $targets{$id};
                }
            },
            no_chdir => 1
        },
        $setup{vardir}
    );

    return @targets;
}

__END__

=head1 NAME

glpi-remote - A tool to scan, manage and initialize virtual remote agents

=head1 SYNOPSIS

glpi-remote [options] [--server server|--local path] [command] [command options]

  Options:
    -h --help           this menu
    -t --timeout <SECS> requests timeout in seconds (defaults to 10)
    -p --port <LIST>    remote ports list to scan (defaults to '22,5985,5986')
    --ssh               connect using SSH
    --ssl               connect using SSL (winrm)
    --no-ssl-check      do not check agent SSL certificate (winrm)
    --ca-cert-dir <PATH> CA certificates directory
    --ca-cert-file <FILE> CA certificates file (winrm)
    --ssl-cert-file     Client certificate file (winrm)
    -u --user           authentication user
    -P --password       authentication password
    -X --show-passwords (list command) show password as they are masked by default
    -c --credentials    credentials list for scan
    -v --verbose        verbose mode
    --debug             debug mode
    -C --no-check       don't check given remote is alive when adding
    -i --inventory      don't register remotes, but run inventory on found remotes
    -T --threads <NUM>  number of threads while scanning (defaults to 1)
    -A --add            add scanned remotes to target so they always be inventoried
                        by RemoteInventory task

  Target definition options:
    -s --server=<URI>   agent will send tasks result to that server
    -l --local=<PATH>   agent will write tasks results locally
    --target=<TARGETID> use target identified by its id (see list targets command)
  Remark:
   - target option is generaly mandatory while adding remote or scanning for remotes
   - if one server and only one is still setup in the agent it will be selected as
     default target
   - when scanning and making inventory, uses any target option or each inventory
     will be sent to standard output

  Commands
    list [targets]      list known remotes or targets
    add <url>+          add remote with given URL list
    del[ete] <index|deviceid>+
                        delete remote with given list index or given deviceid or
                        current known one when alone or all remotes while using
                        __ALL__ as id
    scan <first> [last] scan given ip range for remote access or just <first> and
                        register it/them as remote agent

  Supported environment variables:
    USERNAME
    PASSWORD
    PORT
    CA_CERT_PATH
    CA_CERT_FILE
    SSL_CERT_FILE
    CREDENTIALS

  Examples:
    glpi-remote list
    glpi-remote list targets
    glpi-remote add ssh://admin:pass@192.168.43.237
    glpi-remote add ssh://admin:pass@192.168.43.238 --no-check
    glpi-remote add winrm://admin:pass@192.168.48.250 --no-check --target server0
    glpi-remote delete 1
    glpi-remote scan 192.168.43.1 192.168.43.254
    glpi-remote scan 10.0.0.1 10.0.10.254 --inventory -s https://login:pw@server/plugins/fusioninventory/
    glpi-remote scan 10.0.0.1 10.0.10.254 --inventory -l /var/tmp/remotes
    glpi-remote scan --inventory
    glpi-remote scan 192.168.48.99 | \
         glpi-injector -url https://login:pw@server/plugins/fusioninventory/

=head1 DESCRIPTION

This tool is used to manage locally known virtual agents used to make remote inventories.
